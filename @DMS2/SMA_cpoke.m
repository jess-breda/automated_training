% DMS2 State Machine Assmbler (SMA) for cpoke
%
% primary used SMA for DMS2 where a center poke initiates
% the trial. This SMA is very flexible allowing for fixation,
% or no fixation as well varies types of shaping strategies
% such as reward guides and sound replay
%
% visualization of flow can be found here: 
% https://docs.google.com/drawings/d/1TdGXWv2zME2ZIzvdt-MyJcfGsiPKddUEM4NUAQwQRmo/edit?usp=sharing
% 
% Written by Jess Breda 2023

function [varargout] = SMA_cpoke(obj, action)

GetSoloFunctionArgs;


switch action

    %---------------------------------------------------------------%
    %          init                                                 %
    %---------------------------------------------------------------%
	case 'init'
        
        feval(mfilename, obj, 'prepare_next_trial');

    %---------------------------------------------------------------%
    %          prepare_next_trial                                   %
    %---------------------------------------------------------------%
	case 'prepare_next_trial'

        %%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% SETUP THE HARDWARE %%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%

        %%% minimum time
        min_time= 2.5E-4;  % This is less than the minumum time allowed for a state transition.

        %%% define LEDs and water lines
        left1led    = bSettings('get', 'DIOLINES', 'left1led');
        center1led  = bSettings('get', 'DIOLINES', 'center1led');
        center2led  = bSettings('get', 'DIOLINES', 'center1water');
        right1led   = bSettings('get', 'DIOLINES', 'right1led');
        left1water  = bSettings('get', 'DIOLINES', 'left1water');
        right1water = bSettings('get', 'DIOLINES', 'right1water');


        %%% define state machine assembler
        sma = StateMachineAssembler('full_trial_structure','use_happenings', 1);

        %%% get water valve opening times (based on calibration)
        [LeftWValveTime, RightWValveTime] = WaterValvesSection(obj, 'get_water_times');

        %%% set the values based on correct side
        if strcmp(value(current_side), 'LEFT') 
            correct_response         = 'Lhi';
            incorrect_response       = 'Rhi';
            retry_incorrect_response = 'Rin';
            reward_water_dio         = left1water;
            correct_light_dio        = left1led;
            incorrect_light_dio      = right1led;
            reward_valve_time        = LeftWValveTime;

        elseif strcmp(value(current_side), 'RIGHT')
            correct_response         = 'Rhi';
            incorrect_response       = 'Lhi';
            retry_incorrect_response = 'Lin';
            reward_water_dio         = right1water;
            correct_light_dio        = right1led;
            incorrect_light_dio      = left1led;
            reward_valve_time        = RightWValveTime;
        end

        %%% scale water reward by stim multiple and/or give guide
        reward_valve_time    = reward_valve_time * stim_table{value(current_pair_idx), 5};

        if contains(value(give_type_implemented), 'water')
            give_valve_time  = reward_valve_time * give_water_frac;
            hit_valve_time   = reward_valve_time - give_valve_time;
        else
              hit_valve_time   = reward_valve_time;
        end
    
        %%% set up sounds
        sa_sound_id           = SoundManagerSection(obj, 'get_sound_id', 'SaSound');
        sa_sound_dur          = SoundInterface(obj, 'get', 'SaSound', 'Dur1');
        
        sb_sound_id           = SoundManagerSection(obj, 'get_sound_id', 'SbSound');
        sb_sound_dur          = SoundInterface(obj, 'get', 'SbSound', 'Dur1');

        violation_sound_id    = SoundManagerSection(obj, 'get_sound_id', 'ViolationSound');
        error_sound_id        = SoundManagerSection(obj, 'get_sound_id', 'ErrorSound');
        temp_error_sound_id   = SoundManagerSection(obj, 'get_sound_id', 'TempErrorSound');

        sa_replay_sound_id    = SoundManagerSection(obj, 'get_sound_id', 'SaReplaySound');
        sb_replay_sound_id    = SoundManagerSection(obj, 'get_sound_id', 'SbReplaySound');

        %%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%       WAVES        %%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%

        %% Timing & Stimulus Waves
        
        %%% Trial Timing Waves
        %% Pre go wave 
        % This times the trial (delay-sounda-delay-soundb-delay) to keep 
        % track of when side pokes can count as answers. Once this wave goes
        % hi, you move into `go_state` (can be cued or not). 
        % If `sb_extra` is on, it only includes the time of the sb without the extra. 
        % This way, animals can answer while sb is playing and recieve feedback.
    
        sma = add_scheduled_wave(sma, 'name', 'pre_go_wave',...
                                      'preamble', value(adjusted_pre_dur) + (2*value(stimulus_dur))+ value(delay_dur) + value(post_dur),...
                                      'sustain', 2);

        % add wave hi/lo happening to allow for use as state output action
        pgwn = get_wavenumber(sma, 'pre_go_wave');

        sma = add_happening_spec(sma, struct(...
                                    'name', {'pre_go_wave_hi', 'pre_go_wave_lo'},...
                                    'detectorFunctionName', {'wave_high', 'wave_low'},...
                                    'inputNumber', {pgwn, pgwn}));

        %% Can Violate Wave
        % this times the duration of the trial when you can violate (either
        % by poking early or breaking fixation depending on requirements).
        % Once this wave goes high, motor requirments are relaxed, but 
        % answers will not be counted until pre_go wave goes hi
        sma = add_scheduled_wave(sma, 'name', 'viol_off_wave',...
                                      'preamble', value(viol_off_dur), ...
                                      'sustain', 3);

        cvwn = get_wavenumber(sma, 'viol_off_wave');
        
        sma = add_happening_spec(sma, struct(...
                                 'name', {'viol_off_wave_hi', 'viol_off_wave_lo'},...
                                 'detectorFunctionName', {'wave_high', 'wave_low'},...
                                 'inputNumber', {cvwn, cvwn}));

        %%% Stimulus (sa, sb) Waves
        if value(stimuli_on)
            %% first sound, sa
            sma = add_scheduled_wave(sma, 'name', 'sa_sound_wave',...
                                        'preamble', value(adjusted_pre_dur),...
                                        'sustain', sa_sound_dur,...
                                        'sound_trig', sa_sound_id);
            %% secound sound, sb 
            sma = add_scheduled_wave(sma, 'name', 'sb_sound_wave',...
                                        'preamble', value(adjusted_pre_dur) + sa_sound_dur + value(delay_dur),...
                                        'sustain', sb_sound_dur,...
                                        'sound_trig', sb_sound_id);
            
            % on waves triggered in cpoke statae                          
            timing_and_stim_waves_on = 'sa_sound_wave + sb_sound_wave + viol_off_wave + pre_go_wave';
            % off waves triggered in violation state
            timing_and_stim_waves_off = '-sa_sound_wave - sb_sound_wave - viol_off_wave - pre_go_wave';
        else
            timing_and_stim_waves_on = 'viol_off_wave + pre_go_wave';
            timing_and_stim_waves_off = '-viol_off_wave - pre_go_wave';
        end


        %% Go cue wave (light)
        go_cue_waves_on = '';
        go_cue_waves_off= '';
        switch value(go_type)
        case 'LED_persist'
            go_cue_waves_on = 'go_corr_light_persist_wave + go_incorr_light_persist_wave';
            go_cue_waves_off = '-go_corr_light_persist_wave - go_incorr_light_persist_wave';

            sma = add_scheduled_wave(sma, 'name', 'go_corr_light_persist_wave', ...
                                          'preamble', 0, ...
                                          'sustain', value(go_dur), ...
                                          'loop', -1,...
                                          'DOut', correct_light_dio);

            sma = add_scheduled_wave(sma, 'name', 'go_incorr_light_persist_wave', ...
                                          'preamble', 0, ...
                                          'sustain', value(go_dur), ...
                                          'loop', -1,...
                                          'DOut', incorrect_light_dio);
        case 'LED_flash'
            go_cue_waves_on = 'go_corr_light_flash_wave + go_incorr_light_flash_wave';
            go_cue_waves_off= '';
            
            sma = add_scheduled_wave(sma, 'name', 'go_corr_light_flash_wave', ...
                                          'preamble', 0, ...
                                          'sustain', value(go_dur), ...
                                          'DOut', correct_light_dio);

            sma = add_scheduled_wave(sma, 'name', 'go_incorr_light_flash_wave', ...
                                          'preamble', 0, ...
                                          'sustain', value(go_dur), ...
                                          'DOut', incorrect_light_dio);
        end

        %%  Give light wave
        if contains(value(give_type_implemented), 'light')

            if value(give_light_persist); loop = -1; else; loop = 1; end

            % Note extra_give_light_del_dur adds to pre_give_del_dur, such that
            % pre_give_del_dur + extra_give_light_del_dur = total time pre
            % light give. To use when shifting an animal off light -> water
            sma = add_scheduled_wave(sma, 'name', 'give_light_wave', ...
                                  'preamble', value(extra_give_light_del_dur), ...
                                  'sustain', value(give_light_dur), ...
                                  'loop', loop,...
                                  'DOut', correct_light_dio);

            % only give or go could be persistently turned on during 
            % wait_for_spoke and need to be turned off upon answer (or no 
            % answer), so they will share the same off variable to keep it 
            % cleaner in the SMA
            go_or_give_light_waves_off = ['-give_light_wave' go_cue_waves_off];
        else
            go_or_give_light_waves_off = ['' go_cue_waves_off];
        end

        %% Replay sound waves
        replay_sound_waves_on = '';
        replay_sound_waves_off = '';

        if value(replay_on)
            replay_sound_waves_on = 'sa_replay_wave + sb_replay_wave';


            if value(replay_n_loops) == -1
                replay_sound_waves_off = '-sa_replay_wave - sb_replay_wave';
            end

            sma = add_scheduled_wave(sma, 'name', 'sa_replay_wave', ...
                                          'preamble', 0, ...
                                          'sustain', value(replay_sa_dur) + value(replay_delay_dur) + value(replay_sb_dur) + value(replay_post_dur), ...
                                          'loop', value(replay_n_loops),...
                                          'sound_trig', sa_replay_sound_id);

            sma = add_scheduled_wave(sma, 'name', 'sb_replay_wave', ...
                                          'preamble', value(replay_sa_dur) + value(replay_delay_dur), ...
                                          'sustain', value(replay_sb_dur) + value(replay_post_dur), ...
                                          'loop', value(replay_n_loops),...
                                          'sound_trig', sb_replay_sound_id);
        end
        

        %%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%       STATES       %%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%

        %%% Wait for center poke
        sma = add_state(sma, 'name', 'wait_for_cpoke',...
                             'output_actions', {'DOut', center1led},...
                             'input_to_statechange', {'Cin',  'settling_in';...
                                                      'Chi',  'settling_in'});

        %%% Settling in period- if animal breaks fixation here, trial doesn't start
        sma = add_state(sma, 'name', 'settling_in',...
                             'self_timer', value(settling_in_dur),...
                             'output_actions', {'DOut', center2led * value(fixation_led)},...
                             'input_to_statechange', {'Cout',  'wait_for_cpoke';...
                                                      'Tup',   'cpoke'});

        %%% Animal made it through settling in, start trial & trigger the waves
        sma = add_state(sma, 'name', 'cpoke',...
                             'self_timer', min_time,...
                             'output_actions', {'SchedWaveTrig', timing_and_stim_waves_on;...
                                                'DOut', center2led * value(fixation_led)},...
                             'input_to_statechange', {'Tup', 'current_state+1'});
        %%% Nose in center 
        sma = add_state(sma, 'output_actions', {'DOut', center2led * value(fixation_led)},...
                            'input_to_statechange', {'Cout',             'current_state+1';...
                                                     'Clo',              'current_state+1';...
                                                     'viol_off_wave_hi', 'cin_wait_for_go';...
                                                     'Rin',              'violation_state';...
                                                     'Rout',             'violation_state';...
                                                     'Rhi',              'violation_state';...
                                                     'Lin',              'violation_state';...
                                                     'Lout',             'violation_state';...
                                                     'Lhi',              'violation_state'});

        if fixation_required
            %%% Nose out of center (fixation violtion exists)
            sma = add_state(sma, 'self_timer', value(legal_cbreak_dur),...
                                 'input_to_statechange', {'Cin',  'current_state-1';...
                                                          'Chi',  'current_state-1';...
                                                          'Rin',  'violation_state';...
                                                          'Rout', 'violation_state';...
                                                          'Rhi',  'violation_state';...
                                                          'Lin',  'violation_state';...
                                                          'Lout', 'violation_state';...
                                                          'Lhi',  'violation_state';...
                                                          'Tup',  'violation_state'});
                                                                                              
        else
            %%% Nose out of center (no fixation violation here)
            sma = add_state(sma, 'self_timer', value(legal_cbreak_dur),...
                                 'input_to_statechange', {'Cin',  'current_state-1';...
                                                          'Chi',  'current_state-1';...
                                                          'Rin',  'violation_state';...
                                                          'Rout', 'violation_state';...
                                                          'Rhi',  'violation_state';...
                                                          'Lin',  'violation_state';...
                                                          'Lout', 'violation_state';...
                                                          'Lhi',  'violation_state';...
                                                          'Tup',  'cout_wait_for_viol'});
            
            %%% Out of center, need to wait for violation window to end                                                                                            
            sma = add_state(sma, 'name', 'cout_wait_for_viol',...
                                 'output_actions', {'DOut', center2led * value(fixation_led)},...
                                 'input_to_statechange', {'viol_off_wave_hi', 'cout_wait_for_go';...
                                                          'Rin',              'violation_state';...
                                                          'Rout',             'violation_state';...
                                                          'Rhi',              'violation_state';...
                                                          'Lin',              'violation_state';...
                                                          'Lout',             'violation_state';...
                                                          'Lhi',              'violation_state'});
        end
        
        %%% Nose in center still, waiting for go wave to go high but can technicaly leave
        %%% center without penalty
        sma = add_state(sma, 'name', 'cin_wait_for_go',...
                            'output_actions', {'DOut', center2led * value(fixation_led)},...
                            'input_to_statechange', {'pre_go_wave_hi', 'go_state';...
                                                     'Cout',           'cout_wait_for_go';...
                                                     'Clo',            'cout_wait_for_go';...
                                                     'Rin',            'cout_wait_for_go';...
                                                     'Rout',           'cout_wait_for_go';...
                                                     'Rhi',            'cout_wait_for_go';...
                                                     'Lin',            'cout_wait_for_go';...
                                                     'Lout',           'cout_wait_for_go';...
                                                     'Lhi',            'cout_wait_for_go'});
        
        %%% Nose out of center, violation window has ended, just waiting for go. If a side
        %%% poke it attemped, animal gets no feedback but it's doucmented by state transition
        sma = add_state(sma, 'name', 'cout_wait_for_go',...
                             'input_to_statechange', {'pre_go_wave_hi', 'go_state';...
                                                      'Rin',            'early_spoke_wait_for_go';...
                                                      'Rout',           'early_spoke_wait_for_go';...
                                                      'Lin',            'early_spoke_wait_for_go';...
                                                      'Lout',           'early_spoke_wait_for_go'});
                                                
        sma = add_state(sma, 'name', 'early_spoke_wait_for_go',...
                             'self_timer', 0.001,...
                             'input_to_statechange', {'Tup',             'cout_wait_for_go';...
                                                      'pre_go_wave_hi',  'go_state'});
        
        %%% determine next state switch conditioned of if reward guide is on or not
        if strcmp(value(give_type_implemented), 'none')
            post_go_state = 'wait_for_spoke';
        else
            % if give is on, create the appropriate states
            post_go_state = 'pre_give_delay';

            sma = add_state(sma, 'name', 'pre_give_delay',...
                     'self_timer', value(give_del_dur),...
                     'input_to_statechange', {'Tup', 'give_state';...
                                              correct_response, 'hit_state'});
            switch value(give_type_implemented)
            case 'water'
                sma = add_state(sma, 'name', 'give_state',...
                                     'self_timer', give_valve_time,...
                                     'output_actions', {'DOut', reward_water_dio},...
                                     'input_to_statechange', {'Tup', 'wait_for_spoke'});

            case 'light'
                sma = add_state(sma, 'name', 'give_state',...
                                     'self_timer', min_time,...
                                     'output_actions', {'SchedWaveTrig', 'give_light_wave'},...
                                     'input_to_statechange', {'Tup', 'wait_for_spoke'});

            case 'water_and_light'
                sma = add_state(sma, 'name', 'give_state',...
                                     'self_timer', give_valve_time,...
                                     'output_actions', {'DOut', reward_water_dio},...
                                     'input_to_statechange', {'Tup','current_state+1'});
                sma = add_state(sma,...
                                     'self_timer', min_time,...
                                     'output_actions', {'SchedWaveTrig', 'give_light_wave'},...
                                     'input_to_statechange', {'Tup', 'wait_for_spoke'});
            end
        end
        
        %%% Go cue (if any is triggered here)
        sma = add_state(sma, 'name', 'go_state',...
                             'self_timer', value(go_dur),...
                             'output_actions', {'SchedWaveTrig', go_cue_waves_on},...
                             'input_to_statechange', {'Tup', post_go_state});
       
        
        %%% determine error conditions
        if value(temp_error_penalty)
            % if single retry, move to error state if wrong twice
            error_type = 'temp_error_state';
            if strcmp(value(retry_type), 'single')
                retry_incorrect_state = 'error_state';
            % if multi, need to get it right to end trial
            elseif strcmp(value(retry_type), 'multi')
                retry_incorrect_state = 'temp_error_state';
            end
        else
            error_type = 'error_state';
            retry_incorrect_state = 'error_state'; % will not be used, but keeping sma happy
        end

        %%% go cue passed, now we wait for the animal's answer
        sma = add_state(sma, 'name', 'wait_for_spoke',...
                             'self_timer', value(wait_for_spoke_dur),...
                             'input_to_statechange', {correct_response,   'hit_state';...
                                                      incorrect_response, error_type;...
                                                      'Tup',              'no_answer_state'});
        
        %%% Hit state: animal made correct choice & gets reward
        sma = add_state(sma, 'name', 'hit_state',...
                             'self_timer', hit_valve_time,...
                             'output_actions', {'DOut', reward_water_dio,...
                                                'SchedWaveTrig', go_or_give_light_waves_off},...
                             'input_to_statechange', {'Tup', 'drink_state'});
        
        sma = add_state(sma, 'name', 'drink_state',...
                             'self_timer', value(drinking_dur),...
                             'output_actions', {'DOut', correct_light_dio * value(reward_light),...
                                                'SchedWaveTrig', replay_sound_waves_on},...
                             'input_to_statechange', {'Tup', 'hit_cleanup_state'});

        % if using replay with an infinite loop, don't want to prep sound
        % for next trial until the replay is turned off
        sma = add_state(sma, 'name', 'hit_cleanup_state',...
                             'self_timer', min_time,...
                             'output_actions', {'SchedWaveTrig', replay_sound_waves_off},...
                             'input_to_statechange', {'Tup', 'final_state'});
        
        %%% Temporary Error State: animal get to retry(ies) after penalty and sound
        sma = add_state(sma, 'name', 'temp_error_state',...
                             'self_timer', value(temp_error_dur),...
                             'output_actions', {'SoundOut', temp_error_sound_id},...
                             'input_to_statechange', {'Tup', 'wait_for_spoke_retry'});
                            
        % waiting for retry answer
        sma = add_state(sma, 'name', 'wait_for_spoke_retry',...
                             'self_timer', value(wait_for_spoke_dur),...
                             'output_actions', {'SchedWaveTrig', go_cue_waves_on},...
                             'input_to_statechange', {correct_response,        'retry_hit_state';...
                                                      retry_incorrect_response, retry_incorrect_state;...
                                                      'Tup',                    'no_answer_state'});

        % if retry is correct, this state allows for delayed water delivery
        sma = add_state(sma, 'name', 'retry_hit_state',...
                             'self_timer', value(temp_error_water_delay),...
                             'output_actions', {'SchedWaveTrig', go_or_give_light_waves_off},...
                             'input_to_statechange', {'Tup', 'hit_state'});

        %%% Error state: no retries allowed                     
        % error state does not allow animal to retry after penalty
        % two seperate states to allow for dispatcher clean up to happen
        % after poking causing error state is recored into parsed_events
        sma = add_state(sma, 'name', 'error_state',...
                             'self_timer', 0.001,...
                             'input_to_statechange', {'Tup', 'error_penalty_state'});

        sma = add_state(sma, 'name', 'error_penalty_state',...
                             'self_timer', value(error_dur),...
                             'output_actions', {'SoundOut', error_sound_id,...
                                                'SchedWaveTrig', go_or_give_light_waves_off},...
                             'input_to_statechange', {'Tup', 'final_state'});

        %%% Violation state: turn off any sounds & enter violation penalty
        sma = add_state(sma,'name','violation_state','self_timer',0.001,...
            'output_actions',{'SchedWaveTrig', timing_and_stim_waves_off},...
            'input_to_statechange',{'Tup','violation_penalty_state'}); 
        
        %%% TODO- will this break if the sa_sound_id isn't playing or wasn't ever sent?
        % turn the stimuli off, create a big delay and violate to test.
        sma = add_multi_sounds_state(sma, [-sa_sound_id -sb_sound_id violation_sound_id],...
                                          'self_timer', value(violation_dur),...
                                          'state_name', 'violation_penalty_state',...
                                          'return_state', 'final_state');
        
        %%% No answer state: if the spoke state Tups and there is no penalty, the trial
        %%% cleans-up and moves on
        sma = add_state(sma, 'name','no_answer_state',...
                             'self_timer', min_time,...
                             'output_actions', {'SchedWaveTrig', go_or_give_light_waves_off},...
                             'input_to_statechange', {'Tup', 'final_state'});                                    

        %%% Final states- control the inter trial interval and can vary depending on idt performance mult.
        sma = add_state(sma, 'name','final_state',...
                             'self_timer', value(inter_trial_dur),...
                             'input_to_statechange', {'Tup', 'check_next_trial_ready'});
    
        
        % send SMA output back to DMS2.m where dispatcher is called
        varargout{1} = sma;
        varargout{2} = {'hit_cleanup_state', 'error_penalty_state', 'violation_penalty_state', 'no_answer_state'}; 

    %---------------------------------------------------------------%
    %          reinit                                               %
    %---------------------------------------------------------------%
    case 'reinit'
        currfig = double(gcf);
        % Delete all SoloParamHandles who belong to this object and whose
        % fullname starts with the name of this mfile:
        delete_sphandle('owner', ['^@' class(obj) '$'],...
            'fullname', ['^' mfilename]);

		% Reinitialise at the original GUI position and figure:
		feval(mfilename, obj, 'init');

		% Restore the current figure:
		figure(currfig)
    %---------------------------------------------------------------%
    %          otherwise                                            %
    %---------------------------------------------------------------%
    otherwise
        error('Called action: %s, which is undefined.', action);
end
